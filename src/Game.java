import java.io.*;import java.nio.file.Files;import java.util.StringTokenizer;import java.util.logging.Level;import java.util.logging.Logger;import javax.swing.JOptionPane;class Game {    private Parser parser;    private Room currentRoom;    private Room outside= new Room("you are at the graveyard.\nyour eye can see a torch over that grave stone\n and a knife that someone used to scratch this stone ");;    private int currentRoomNumber;     private static FileWriter fw;    private static String filename="src\\gameMovements.txt";    private static String filename1="src\\savedGame.txt";    private static Inventory inventory ;        /**     * Create the game and initialise its internal map.     */    public Game()     {        createRooms();        parser = new Parser();    }    /**     * Create all the rooms and link their exits together.     */    private void createRooms()    {        Room  sacretMonastery,grave, theGate,forbiddenGateway ,kingsPlateu;                      // create the rooms       // NORTH EAST SOUTH WEST        //grave = new Room("you are at the graveyard.\nyour eye can see a torch over that grave stone\n and a knife that someone used to scratch this stone ");        sacretMonastery = new Room("inside the scarlet monastery you can see some items thrown down(a phone , a key) ");        theGate = new Room("you appear in front of a big gate this gate is magical youll need a key to pass through this");        forbiddenGateway = new Room("'THE FORBIDDEN GATEWAY' . beyond that gateway awaits nightmare no one has ever returned");        kingsPlateu = new Room("Thats the statue everyone admires 'OUR KING'");        // initialise room exits        this.outside.setExits(null, kingsPlateu, theGate, sacretMonastery);               sacretMonastery.setExits(kingsPlateu,this.outside, null, null);        theGate.setExits(theGate, forbiddenGateway, null, kingsPlateu);        forbiddenGateway.setExits(null, null, kingsPlateu, theGate);        kingsPlateu.setExits(forbiddenGateway, theGate, sacretMonastery, this.outside);                //links items to the rooms        this.outside.includeItems("knife", "torch", "", "");        kingsPlateu.includeItems("", "", "", "");        sacretMonastery.includeItems("phone", "key", "", "");        theGate.includeItems("", "", "", "");        forbiddenGateway.includeItems("", "", "", "");        //link integer number to room        this.outside.setRoomNumber(1);               sacretMonastery.setRoomNumber(3);        theGate.setRoomNumber(4);        forbiddenGateway.setRoomNumber(5);               currentRoom = this.outside;  // start game outside                currentRoomNumber=currentRoom.getRoomNumber();    }    /**     *  Main play routine.  Loops until end of play.     */    public void play() throws UnsupportedEncodingException, FileNotFoundException     {                    printWelcome();        // Enter the main command loop.  Here we repeatedly read commands and        // execute them until the game is over.                        boolean finished = false;        while (! finished)        {            //Command command = parser.getCommand();            finished = processCommand(parser.getCommand());        }        System.out.println("Thank you for playing.  Good bye.");    }        private void printWelcome()    {        System.out.println();        System.out.println("Welcome to Zork!");        System.out.println("Zork is a new, incredibly boring adventure game.");        System.out.println("Type 'help' if you need help.");        System.out.println();        System.out.println(currentRoom.longDescription());    }        private boolean processCommand(Command command) throws UnsupportedEncodingException, FileNotFoundException     {        if(command.isUnknown())        {            System.out.println("I don't know what you mean...");            return false;        }        String commandWord = command.getCommandWord();        if (commandWord.equals("help"))            printHelp();        else if (commandWord.equals("go"))            goRoom(command);        else if(commandWord.equals("save"))            saveGame(filename,filename1);         else if(commandWord.equals("load"))        {                       loadGame(command);                   }        else if (commandWord.equals("take") || commandWord.equals("pick")||commandWord.equals("get") )            takeItem(command);        else if (commandWord.equals("quit") || commandWord.equals("exit"))                     {                    if(command.hasSecondWord())            System.out.println("Quit what?");                       else            {                try {                    System.out.println("VLAKA");                    fw = new FileWriter(filename); //the true will append the new data                    fw.write("");//appends the string to the file                    fw.close();                } catch (IOException ex) {                    Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);                }                return true;  // signal that we want to quit            }                               }        else if (commandWord.equals("show"))            showInventoryItems(command);        return false;    }    // implementations of user commands:    /**     * Print out some help information.     * Here we print some stupid, cryptic message and a list of the      * command words.     */    private void printHelp()     {        System.out.println("You are lost. You are alone. You wander");        System.out.println("around at Monash Uni, Peninsula Campus.");        System.out.println();        System.out.println("Your command words are:");        parser.showCommands();    }    /**      * Try to go to one direction. If there is an exit, enter the new     * room, otherwise print an error message.     */    private void goRoom(Command command)    {                if(!command.hasSecondWord())        {            // if there is no second word, we don't know where to go...            System.out.println("Go where?");            return;        }        String direction = command.getSecondWord();        // Try to leave current room.               Room nextRoom = currentRoom.nextRoom(direction);                //currentRoomNumber=currentRoom.getRoomNumber();        if (nextRoom == null)            System.out.println("There is no door!");        else         {            currentRoom = nextRoom;            currentRoomNumber=currentRoom.getRoomNumber();            System.out.println(currentRoom.longDescription());            try            {                     fw = new FileWriter(filename,true); //the true will append the new data                 fw.write(command.getCommandWord()+" "+command.getSecondWord()+"\n");//appends the string to the file                 fw.close();            }            catch(IOException ioe)            {                System.err.println("IOException: " + ioe.getMessage());            }        }    }    //if the command word is "show" and if the second word is "inventory" then     //calls the function who prints inventpry's items    private void showInventoryItems(Command command)    {        ItemWords items = new ItemWords();         if(!command.hasSecondWord())        {             // if there is no second word, we don't know what to take...            System.out.println("show what?");            return;        }                String secondWord = command.getSecondWord();        inventory =new Inventory();                if (secondWord.equals("inventory"))            inventory.showInventory();        else            System.out.println("i don't know what you mean.");                }    //Puts the item in inventory     private void takeItem(Command command)    {        ItemWords items = new ItemWords();         Inventory inventory =new Inventory();        if(!command.hasSecondWord())        {             // if there is no second word, we don't know what to take...            System.out.println("Take what?");                    }                String item = command.getSecondWord();                       if(!items.isItem(item) )          System.out.println("There is no item like this");        else if (!currentRoom.isItemInThisRoom(item))            System.out.println("There is no this item in this room");        else if(inventory.isItemInInventory(item))            System.out.println("You already have this item");        else        {            inventory.putItemInArrayList(item);            System.out.println("Now you have " + item);            try            {                                 fw = new FileWriter(filename,true); //the true will append the new data                 fw.write(command.getCommandWord()+" "+command.getSecondWord()+"\n");//appends the string to the file                 fw.close();            }            catch(IOException ioe)            {                System.err.println("IOException: " + ioe.getMessage());            }        }                //System.out.println("Now you have " + item);        System.out.println("Choose your next move");            }    private void saveGame(String filename , String filename1)    {        try {            try {                FileInputStream from = new FileInputStream(filename);                FileOutputStream to = new FileOutputStream(filename1);                byte []buffer = new byte[256];                int byteRead;                while((byteRead=from.read(buffer))!=-1)                {                    to.write(buffer,0,byteRead);                }                from.close();                to.close();            } catch (FileNotFoundException ex) {                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);            } catch (IOException ex) {                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);            }            fw = new FileWriter(filename); //the true will append the new data            fw.write("");//appends the string to the file            fw.close();         } catch (IOException ex) {            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);        }               System.out.println("Game Saved Succesfully");                        }           private void loadGame(Command command)    {        String line,line1,line2;                    currentRoom = outside;            inventory = new Inventory();            boolean goOn = true;            try {                FileReader file ;                file = new FileReader(filename1);                BufferedReader reader = new BufferedReader(file);                                                while(goOn==true)                {                    line = reader.readLine();                    if(line!=null)                    {                        StringTokenizer tokenizer = new StringTokenizer(line);                        line1=tokenizer.nextToken();                        line2=tokenizer.nextToken();                        if(line1.equals("go"))                        {                            currentRoom=currentRoom.nextRoom(line2);                                                  }                        else if(line1.equals("take") || line1.equals("pick")||line1.equals("get"))                        {                            inventory.putItemInArrayList(line2);                        }                    }                    else                        goOn=false;                }                            } catch (FileNotFoundException ex) {                Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);            } catch (IOException ex) {                            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, null, ex);            }                        System.out.println("Game Loaded Successfully");              }}